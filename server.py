# -*- coding: utf-8 -*-
"""server.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1tiaOb0AEQ9P1sDeUN6ItgjBjGppplXhj
"""

# !pip install websockets

import asyncio
import json
import logging
import websockets

USERS = set()

def submit_event():
    return json.dumps({"type": "submit", **SUBMIT})

async def notify_submit():
    if USERS: # asyncio.wait doesn't accept an empty list
        message = submit_event()
        await asyncio.wait([user.send(message) for user in USERS])

async def register(websocket):
    USERS.add(websocket)

async def unregister(websocket):
    USERS.remove(websocket)

async def counter(websocket, path):
    # register(websocket) sends user_event() to websocket
    await register(websocket)
    try:
        # await websocket.send(square_event())
        # await websocket.send(circle_event())
        async for message in websocket:
            data = json.loads(message)
            print("message action is", data["action"])
            if data["action"] == "submit":
                SUBMIT["prediction"] = data["prediction"]
                SUBMIT["ID"] = data["ID"]
                await notify_submit()
            else:
                logging.error("unsupported event: {}", data)
    finally:
        await unregister(websocket)


start_server = websockets.serve(counter, "localhost", 6789)

asyncio.get_event_loop().run_until_complete(start_server)
asyncio.get_event_loop().run_forever()